/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package school;

import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Timer;
import java.util.TimerTask;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

/**
 *
 * @author HP
 */

public class adminpassword extends javax.swing.JFrame {
    Pattern SpecialCharPatten=Pattern.compile("[^a-z0-9]",Pattern.CASE_INSENSITIVE);
    Pattern UpperCasePatten=Pattern.compile("[A-Z]");
    Pattern lowerCasePatten=Pattern.compile("[a-z]");
    Pattern digitalCasePatten=Pattern.compile("[0-9]");
    
    int attempts=0;
    static int interval;
    static Timer timer;

    /**
     * Creates new form 
     */
    public adminpassword() {
        initComponents();
        //stopwatch();
        
    }
    public void stopwatch(){   
        int delay =1000;
        int period =1000;
        timer=new Timer();
        interval= 90;
        timer.scheduleAtFixedRate(new TimerTask() {
        public void run() {
            setInterval();
        }
    }, delay, period);
    }
   public int setInterval() {
    if (interval == 1){
        timer.cancel();
        System.exit(0);
    }
    return --interval;
        
}
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        update = new javax.swing.JButton();
        nname = new javax.swing.JTextField();
        cname = new javax.swing.JTextField();
        section = new javax.swing.JComboBox<>();
        npassword = new javax.swing.JPasswordField();
        cpassword = new javax.swing.JPasswordField();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Change your Basics Mr. Admin !  ");
        setMaximumSize(new java.awt.Dimension(535, 480));
        setMinimumSize(new java.awt.Dimension(535, 480));
        setPreferredSize(new java.awt.Dimension(535, 480));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("New Admin password");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 270, 170, 30));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel2.setText("Section");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 86, 140, 30));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Current Admin name");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 150, 170, 30));

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("New Admin name");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 180, 140, 30));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Current Admin password");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 240, 180, 30));

        update.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        update.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/update 512,512.png"))); // NOI18N
        update.setText("  Update");
        update.setBorder(null);
        update.setBorderPainted(false);
        update.setContentAreaFilled(false);
        update.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        getContentPane().add(update, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 360, 180, 30));

        nname.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        nname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nnameKeyPressed(evt);
            }
        });
        getContentPane().add(nname, new org.netbeans.lib.awtextra.AbsoluteConstraints(221, 180, 230, 25));

        cname.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cnameKeyPressed(evt);
            }
        });
        getContentPane().add(cname, new org.netbeans.lib.awtextra.AbsoluteConstraints(221, 150, 230, 25));

        section.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        section.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Registration & HR", "Examinations", "Accounting" }));
        getContentPane().add(section, new org.netbeans.lib.awtextra.AbsoluteConstraints(221, 86, 230, 30));

        npassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                npasswordKeyPressed(evt);
            }
        });
        getContentPane().add(npassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(221, 270, 230, 25));

        cpassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cpasswordKeyPressed(evt);
            }
        });
        getContentPane().add(cpassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(221, 240, 230, 25));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/new admin.gif"))); // NOI18N
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 0, 550, 490));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
       if(cname.getText().isEmpty() || nname.getText().isEmpty() || nname.getText().length()<5 || cpassword.getText().length()<1 || npassword.getText().length()<1){
               JOptionPane.showMessageDialog(this, "Entered one or more data is not acceptable ! ");
               ++attempts;
               if(attempts>=3){
                   System.exit(0);
               }
           }else{
               try{
               Conn.Database.getDatabaseConnection();
               PreparedStatement ps=Conn.Database.con.prepareStatement("Select adminid from admin where section =? and adminName=binary ? AND adminpassword=binary ? ");
               ps.setString(1, section.getSelectedItem().toString());
               String checksection=section.getSelectedItem().toString();
               ps.setString(2, cname.getText());
               ps.setString(3,cpassword.getText());
               ResultSet rs=ps.executeQuery();
               if(rs.next()){
                   timer.cancel();
                   if(npassword.getText().length()<8 || npassword.getText().length()>64){
                    JOptionPane.showMessageDialog(this,"Admin, Your Password must have at least Eight characters !");
                   }else if(!SpecialCharPatten.matcher(npassword.getText()).find()){
                    JOptionPane.showMessageDialog(this, "Admin, Your Password must consist of at least one Special Character !");
                   }else if(!UpperCasePatten.matcher(npassword.getText()).find()){
                   JOptionPane.showMessageDialog(this, "Admin, Your Password must consist of at least one Block Letter !");
                   }else if(!lowerCasePatten.matcher(npassword.getText()).find()){
                   JOptionPane.showMessageDialog(this, "Admin,Your Password must consist of at least one simple letter !");
                   }else if(!digitalCasePatten.matcher(npassword.getText()).find()){
                   JOptionPane.showMessageDialog(this, "Admin, Your Password must consist of at least one digit !");
                   }else{
                       try{
                           PreparedStatement ps1=Conn.Database.con.prepareStatement("Update admin set adminname=?, adminpassword=? where section='"+checksection+"' ");
                           ps1.setString(1, nname.getText());
                           ps1.setString(2,npassword.getText());
                           ps1.executeUpdate();
                           JOptionPane.showMessageDialog(this, "Admin Basics Updated Successfully !     ");
                           this.dispose();
                           Conn.Database.disconnectDatabase();
                           
                       }catch(HeadlessException x){
                        JOptionPane.showMessageDialog(this, "Error:\n"+x);
                       }catch(SQLException ex){
                        JOptionPane.showMessageDialog(this,"Error In SQL: \n"+ex);
                       }  
                   }
                       
                   
               }else{
                   JOptionPane.showMessageDialog(this, "Entered current data is corrpted !  \nCheck and Try again !      ");
                   ++attempts;
                   if(attempts>=3){
                       System.exit(0);
                   }
               }
               Conn.Database.disconnectDatabase();
           }catch(HeadlessException x){
               JOptionPane.showMessageDialog(this, "Error:\n"+x);
           }catch(SQLException ex){
               JOptionPane.showMessageDialog(this,"Error In SQL: \n"+ex);
           }  
       }
    }//GEN-LAST:event_updateActionPerformed

    private void cnameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cnameKeyPressed
      if(evt.getKeyCode()==KeyEvent.VK_ENTER || evt.getKeyCode()==KeyEvent.VK_DOWN){
          if(cname.getText().isEmpty()){
              JOptionPane.showMessageDialog(this, "Entered current admin name is incorrect !       ");
          }else{
              nname.requestFocus();
          }
      }
    }//GEN-LAST:event_cnameKeyPressed

    private void nnameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nnameKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER || evt.getKeyCode()==KeyEvent.VK_DOWN){
            if(nname.getText().isEmpty() || nname.getText().length()<5){
               JOptionPane.showMessageDialog(this, "Entered new admin name cannot be accepted !       "); 
            }else{
                cpassword.requestFocus();
            }
        }
    }//GEN-LAST:event_nnameKeyPressed

    private void cpasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cpasswordKeyPressed
      if(evt.getKeyCode()==KeyEvent.VK_ENTER || evt.getKeyCode()==KeyEvent.VK_DOWN){
           if(cpassword.getText().length()==0){
               JOptionPane.showMessageDialog(this,"Entered Password cannot be accepted !");
           }else if(cpassword.getText().length()<8 || cpassword.getText().length()>64){
               JOptionPane.showMessageDialog(this,"Your Password must have at least Eight characters !");
           }else if(!SpecialCharPatten.matcher(cpassword.getText()).find()){
           JOptionPane.showMessageDialog(this, "Your Password must consist of at least one Special Character !");
       }else if(!UpperCasePatten.matcher(cpassword.getText()).find()){
           JOptionPane.showMessageDialog(this, "Your Password must consist of at least one Block Letter !");
       }else if(!lowerCasePatten.matcher(cpassword.getText()).find()){
           JOptionPane.showMessageDialog(this, "Your Password must consist of at least one simple letter !");
       }else if(!digitalCasePatten.matcher(cpassword.getText()).find()){
           JOptionPane.showMessageDialog(this, "Your Password must consist of at least one digit !");
       }else{
           npassword.requestFocus();
       }
    }                  
    }//GEN-LAST:event_cpasswordKeyPressed

    private void npasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_npasswordKeyPressed
       if(evt.getKeyCode()==KeyEvent.VK_ENTER || evt.getKeyCode()==KeyEvent.VK_DOWN){
           if(cname.getText().isEmpty() || nname.getText().isEmpty() || nname.getText().length()<5 || cpassword.getText().length()<1 || npassword.getText().length()<1){
               JOptionPane.showMessageDialog(this, "Entered one or more data is not acceptable ! ");
               ++attempts;
               if(attempts>=3){
                   System.exit(0);
               }
           }else{
               try{
               Conn.Database.getDatabaseConnection();
               PreparedStatement ps=Conn.Database.con.prepareStatement("Select adminid from admin where section =? and adminName=binary ? AND adminpassword=binary ? ");
               ps.setString(1, section.getSelectedItem().toString());
               String checksection=section.getSelectedItem().toString();
               ps.setString(2, cname.getText());
               ps.setString(3,cpassword.getText());
               ResultSet rs=ps.executeQuery();
               if(rs.next()){
                   timer.cancel();
                   if(npassword.getText().length()<8 || npassword.getText().length()>64){
                    JOptionPane.showMessageDialog(this,"Admin, Your Password must have at least Eight characters !");
                   }else if(!SpecialCharPatten.matcher(npassword.getText()).find()){
                    JOptionPane.showMessageDialog(this, "Admin, Your Password must consist of at least one Special Character !");
                   }else if(!UpperCasePatten.matcher(npassword.getText()).find()){
                   JOptionPane.showMessageDialog(this, "Admin, Your Password must consist of at least one Block Letter !");
                   }else if(!lowerCasePatten.matcher(npassword.getText()).find()){
                   JOptionPane.showMessageDialog(this, "Admin,Your Password must consist of at least one simple letter !");
                   }else if(!digitalCasePatten.matcher(npassword.getText()).find()){
                   JOptionPane.showMessageDialog(this, "Admin, Your Password must consist of at least one digit !");
                   }else{
                       try{
                           PreparedStatement ps1=Conn.Database.con.prepareStatement("Update admin set adminname= ?, adminpassword=? where section = '"+checksection+"' ");
                           ps1.setString(1, nname.getText());
                           ps1.setString(2,npassword.getText());
                           ps1.executeUpdate();
                           JOptionPane.showMessageDialog(this, "Admin Basics Updated Successfully !     ");
                           Conn.Database.disconnectDatabase();
                       }catch(HeadlessException x){
                        JOptionPane.showMessageDialog(this, "Error:\n"+x);
                       }catch(SQLException ex){
                        JOptionPane.showMessageDialog(this,"Error In SQL: \n"+ex);
                       }  
                   }
                       
                   
               }else{
                   JOptionPane.showMessageDialog(this, "Entered current data is corrpted !  \nCheck and Try again !      ");
                   ++attempts;
                   if(attempts>=3){
                       System.exit(0);
                   }
               }
               Conn.Database.disconnectDatabase();
           }catch(HeadlessException x){
               JOptionPane.showMessageDialog(this, "Error:\n"+x);
           }catch(SQLException ex){
               JOptionPane.showMessageDialog(this,"Error In SQL: \n"+ex);
           }  
       }
       }
    }//GEN-LAST:event_npasswordKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(adminpassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(adminpassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(adminpassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(adminpassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new adminpassword().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cname;
    private javax.swing.JPasswordField cpassword;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField nname;
    private javax.swing.JPasswordField npassword;
    private javax.swing.JComboBox<String> section;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
