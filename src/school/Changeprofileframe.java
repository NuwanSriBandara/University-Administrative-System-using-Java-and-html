/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package school;

import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.RenderingHints;
import java.awt.event.KeyEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Timer;
import java.util.TimerTask;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author HP
 */
public class Changeprofileframe extends javax.swing.JFrame {
    Pattern SpecialCharPatten=Pattern.compile("[^a-z0-9]",Pattern.CASE_INSENSITIVE);
    Pattern UpperCasePatten=Pattern.compile("[A-Z]");
    Pattern lowerCasePatten=Pattern.compile("[a-z]");
    Pattern digitalCasePatten=Pattern.compile("[0-9]");
    int attempts=0;
    private ImageIcon ii;
    File f;
    static int interval;
    static Timer timer;

    
    public Changeprofileframe() {
        initComponents();
        stopwatch();
    }
    private void stopwatch(){   
        int delay =1000;
        int period =1000;
        timer=new Timer();
        interval= 180;
        timer.scheduleAtFixedRate(new TimerTask() {
        @Override
        public void run() {
            setInterval();
        }
    }, delay, period);
    }
private int setInterval() {
    if (interval == 1){
        timer.cancel();
        System.exit(0);
    }
        /*int d = Changeprofileframe.DISPOSE_ON_CLOSE;
        if(d==1){
            timer.cancel();
        }*/
    return --interval;
        
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cname = new javax.swing.JTextField();
        nname = new javax.swing.JTextField();
        cpassword = new javax.swing.JPasswordField();
        npassword = new javax.swing.JPasswordField();
        update = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        uploadphoto = new javax.swing.JButton();
        pathname = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Change your Profile credentials, here !");
        setMaximumSize(new java.awt.Dimension(540, 500));
        setMinimumSize(new java.awt.Dimension(540, 500));
        setPreferredSize(new java.awt.Dimension(540, 500));
        setResizable(false);
        setType(java.awt.Window.Type.UTILITY);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("University of Moratuwa");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(65, 24, 390, 40));

        cname.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cnameKeyPressed(evt);
            }
        });
        getContentPane().add(cname, new org.netbeans.lib.awtextra.AbsoluteConstraints(221, 200, 230, 25));

        nname.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        nname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nnameKeyPressed(evt);
            }
        });
        getContentPane().add(nname, new org.netbeans.lib.awtextra.AbsoluteConstraints(221, 230, 230, 25));

        cpassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cpasswordKeyPressed(evt);
            }
        });
        getContentPane().add(cpassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(221, 280, 230, 25));

        npassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                npasswordKeyPressed(evt);
            }
        });
        getContentPane().add(npassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(221, 310, 230, 25));

        update.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        update.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/update 512,512.png"))); // NOI18N
        update.setText("  Update");
        update.setBorder(null);
        update.setBorderPainted(false);
        update.setContentAreaFilled(false);
        update.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        getContentPane().add(update, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 390, 180, 30));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Current name");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 200, 140, 30));

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("New name");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 230, 140, 30));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Current password");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 280, 160, 30));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("New password");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 310, 140, 30));

        jLabel13.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText(" All Rights Reserved by UoM");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 435, 170, 30));

        uploadphoto.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        uploadphoto.setText("Upload New Photo");
        uploadphoto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        uploadphoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadphotoActionPerformed(evt);
            }
        });
        uploadphoto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                uploadphotoKeyPressed(evt);
            }
        });
        getContentPane().add(uploadphoto, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 70, 160, 125));

        pathname.setEditable(false);
        pathname.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        getContentPane().add(pathname, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 120, 211, 25));

        jTextField1.setEditable(false);
        jTextField1.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jTextField1.setText("  confirm the Security of your Profile account");
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 360, 250, -1));

        jTextField2.setEditable(false);
        jTextField2.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jTextField2.setText("* Note that the all above three credentials must be updated simulteneously in order to");
        getContentPane().add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 340, 460, -1));

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/University_of_Moratuwa_logo.png"))); // NOI18N
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 80, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cnameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cnameKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER || evt.getKeyCode()==KeyEvent.VK_DOWN){
            if(cname.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Entered current profile name cannot be accepted !       ");
            }else{
                nname.requestFocus();
            }
        }
    }//GEN-LAST:event_cnameKeyPressed

    private void nnameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nnameKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER || evt.getKeyCode()==KeyEvent.VK_DOWN){
            if(nname.getText().isEmpty() || nname.getText().length()<5){
                JOptionPane.showMessageDialog(this, "Entered new name cannot be accepted !       ");
            }else{
                cpassword.requestFocus();
            }
        }
    }//GEN-LAST:event_nnameKeyPressed

    private void cpasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cpasswordKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER || evt.getKeyCode()==KeyEvent.VK_DOWN){
            if(cpassword.getText().length()<1){
                JOptionPane.showMessageDialog(this,"Entered Password cannot be accepted !");
            }else if(cpassword.getText().length()<8 || cpassword.getText().length()>64){
                JOptionPane.showMessageDialog(this,"Entered current password is not valid !");
            }else if(!SpecialCharPatten.matcher(cpassword.getText()).find()){
                JOptionPane.showMessageDialog(this, "Entered current password is not valid !");
            }else if(!UpperCasePatten.matcher(cpassword.getText()).find()){
                JOptionPane.showMessageDialog(this, "Entered current password is not valid  !");
            }else if(!lowerCasePatten.matcher(cpassword.getText()).find()){
                JOptionPane.showMessageDialog(this, "Entered current password is not valid !");
            }else if(!digitalCasePatten.matcher(cpassword.getText()).find()){
                JOptionPane.showMessageDialog(this, "Entered current password is not valid !");
            }else{
                npassword.requestFocus();
            }
        }
    }//GEN-LAST:event_cpasswordKeyPressed

    private void npasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_npasswordKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER || evt.getKeyCode()==KeyEvent.VK_DOWN){
            if(cname.getText().isEmpty() || nname.getText().isEmpty() || nname.getText().length()<5 || cpassword.getText().length()<1 || npassword.getText().length()<1){
                JOptionPane.showMessageDialog(this, "Entered one or more data is/are not acceptable ! ");
                ++attempts;
                if(attempts>=3){
                    System.exit(0);
                }
            }else{
                try{
                    Conn.Database.getDatabaseConnection();
                    try{
                    FileInputStream fin = new FileInputStream(f);
                    PreparedStatement ps=Conn.Database.con.prepareStatement("Select userid from user where userName=? AND password=binary ? ");
                    
                    
                    ps.setString(1, cname.getText());
                    ps.setString(2,cpassword.getText());
                    ResultSet rs=ps.executeQuery();
                    if(rs.next()){
                        timer.cancel();
                        if(npassword.getText().length()<8 || npassword.getText().length()>64){
                            JOptionPane.showMessageDialog(this,"Your Password must have at least Eight characters !  ");
                        }else if(!SpecialCharPatten.matcher(npassword.getText()).find()){
                            JOptionPane.showMessageDialog(this, "Your Password must consist of at least one Special Character !  ");
                        }else if(!UpperCasePatten.matcher(npassword.getText()).find()){
                            JOptionPane.showMessageDialog(this, "Your Password must consist of at least one Block Letter !  ");
                        }else if(!lowerCasePatten.matcher(npassword.getText()).find()){
                            JOptionPane.showMessageDialog(this, "Your Password must consist of at least one simple letter !   ");
                        }else if(!digitalCasePatten.matcher(npassword.getText()).find()){
                            JOptionPane.showMessageDialog(this, "Your Password must consist of at least one digit !  ");
                        }else if(pathname.getText().length()<1){
                            JOptionPane.showMessageDialog(this, "Your new Profile photo cannot be accepted !   ");
                        }else{
                            try{
                                PreparedStatement ps1=Conn.Database.con.prepareStatement("Update user set username=?, password=?,photo=? where username= ?");
                                ps1.setString(1, nname.getText());
                                ps1.setString(2,npassword.getText());
                                ps1.setString(4, cname.getText());
                                ps1.setBinaryStream(3,(InputStream)fin,(int)f.length());
                                ps1.executeUpdate();
                                JOptionPane.showMessageDialog(this, "Your Profile credentials Updated Successfully !     ");
                                this.dispose();
                                Conn.Database.disconnectDatabase();
                            }catch(HeadlessException x){
                                JOptionPane.showMessageDialog(this, "Error:\n"+x);
                            }catch(SQLException ex){
                                JOptionPane.showMessageDialog(this,"Error In SQL: \n"+ex);
                            }
                        }

                    }else{
                        JOptionPane.showMessageDialog(this, "Entered current data is corrpted !  \nCheck and Try again !      ");
                        ++attempts;
                        if(attempts>=3){
                            timer.cancel();
                            System.exit(0);
                        }
                    }
                    Conn.Database.disconnectDatabase();
                    }catch(FileNotFoundException fx){
                        JOptionPane.showMessageDialog(this,"Error In File:\n"+fx);
                    }
                }catch(HeadlessException x){
                    JOptionPane.showMessageDialog(this, "Error:\n"+x);
                }catch(SQLException ex){
                    JOptionPane.showMessageDialog(this,"Error In SQL: \n"+ex);
                
                }
            }
        }
    }//GEN-LAST:event_npasswordKeyPressed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        if(cname.getText().isEmpty() || nname.getText().isEmpty() || nname.getText().length()<5 || cpassword.getText().length()<1 || npassword.getText().length()<1){
            JOptionPane.showMessageDialog(this, "Entered one or more data is/are not acceptable ! ");
            ++attempts;
            if(attempts>=3){
                System.exit(0);
            }
        }else{
            try{
                Conn.Database.getDatabaseConnection();
                try{
                FileInputStream fin = new FileInputStream(f);
                PreparedStatement ps=Conn.Database.con.prepareStatement("Select userid from user where userName=? AND password=binary ? ");
                
                ps.setString(1, cname.getText());
                ps.setString(2,cpassword.getText());
                ResultSet rs=ps.executeQuery();
                if(rs.next()){
                    timer.cancel();
                    if(npassword.getText().length()<8 || npassword.getText().length()>64){
                        JOptionPane.showMessageDialog(this,"Your Password must have at least Eight characters !");
                    }else if(!SpecialCharPatten.matcher(npassword.getText()).find()){
                        JOptionPane.showMessageDialog(this, "Your Password must consist of at least one Special Character !");
                    }else if(!UpperCasePatten.matcher(npassword.getText()).find()){
                        JOptionPane.showMessageDialog(this, "Your Password must consist of at least one Block Letter !");
                    }else if(!lowerCasePatten.matcher(npassword.getText()).find()){
                        JOptionPane.showMessageDialog(this, "Your Password must consist of at least one simple letter !");
                    }else if(!digitalCasePatten.matcher(npassword.getText()).find()){
                        JOptionPane.showMessageDialog(this, "Your Password must consist of at least one digit !");
                    }else if(pathname.getText().length()<1){
                            JOptionPane.showMessageDialog(this, "Your new Profile photo cannot be accepted !   ");
                    }else{
                        try{
                            PreparedStatement ps1=Conn.Database.con.prepareStatement("Update user set username=?, password=? ,photo=? where username= ?");
                            ps1.setString(1, nname.getText());
                            ps1.setString(2,npassword.getText());
                            ps1.setBinaryStream(3,(InputStream)fin,(int)f.length());
                            ps1.setString(4, cname.getText());
                            ps1.executeUpdate();
                            JOptionPane.showMessageDialog(this, "Your Profile credentials Updated Successfully !     ");
                            this.dispose();
                            Conn.Database.disconnectDatabase();

                        }catch(HeadlessException x){
                            JOptionPane.showMessageDialog(this, "Error:\n"+x);
                        }catch(SQLException ex){
                            JOptionPane.showMessageDialog(this,"Error In SQL: \n"+ex);
                        }
                    }

                }else{
                    JOptionPane.showMessageDialog(this, "Entered current data is corrpted !  \nCheck and Try again !      ");
                    ++attempts;
                    if(attempts>=3){
                        System.exit(0);
                    }
                }
                Conn.Database.disconnectDatabase();
                }catch(FileNotFoundException fx){
                     JOptionPane.showMessageDialog(this,"Error In File:\n"+fx);
                }
            }catch(HeadlessException x){
                JOptionPane.showMessageDialog(this, "Error:\n"+x);
            }catch(SQLException ex){
                JOptionPane.showMessageDialog(this,"Error In SQL: \n"+ex);
            }
        }
    }//GEN-LAST:event_updateActionPerformed

    private void uploadphotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadphotoActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        f = chooser.getSelectedFile();
        String filename = f.getAbsolutePath();
        if (f == null) {
            return;
        }
        try{
            if(isJPEG(f)==true){
                if(f.length()< 2000000){
                    pathname.setText(filename);
                    SwingWorker sw = new SwingWorker() {
                        @Override
                        protected Object doInBackground() throws Exception {
                            Thread.sleep(5000);
                            ii = new ImageIcon(scaleImage(120, 120, ImageIO.read(new File(f.getAbsolutePath()))));
                            return null;
                        }

                        @Override
                        protected void done() {
                            super.done();
                            uploadphoto.setIcon(ii);

                        }

                        private BufferedImage scaleImage(int w, int h, BufferedImage img)throws Exception {
                            BufferedImage bi;
                            bi = new BufferedImage(w, h, BufferedImage.TRANSLUCENT);
                            Graphics2D g2d = (Graphics2D) bi.createGraphics();
                            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                            g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
                            g2d.drawImage(img, 0, 0, w, h, null);
                            g2d.dispose();
                            return bi;
                        }
                    };
                    sw.execute();
                }else{
                    JOptionPane.showMessageDialog(this, "Entered file is too large !  \nPlease enter an image file which is not not larger than 2 MB ");
                }
            }else{
                JOptionPane.showMessageDialog(this, "Entered file is not a recognized image, Check and Try again !");
            }
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this,"Error:\n"+ex);
        }
    }//GEN-LAST:event_uploadphotoActionPerformed

    private void uploadphotoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_uploadphotoKeyPressed

        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            JFileChooser chooser = new JFileChooser();
            chooser.showOpenDialog(null);
            f = chooser.getSelectedFile();
            String filename = f.getAbsolutePath();
            if (f == null) {
                return;
            }
            try {
                if(isJPEG(f)== true){
                    pathname.setText(filename);
                    SwingWorker sw = new SwingWorker() {
                        @Override
                        protected Object doInBackground() throws Exception {
                            Thread.sleep(5000);
                            ii = new ImageIcon(scaleImage(120, 120, ImageIO.read(new File(f.getAbsolutePath()))));
                            return null;
                        }

                        @Override
                        protected void done() {
                            super.done();
                            uploadphoto.setIcon(ii);

                        }

                        private BufferedImage scaleImage(int w, int h, BufferedImage img)throws Exception {
                            BufferedImage bi;
                            bi = new BufferedImage(w, h, BufferedImage.TRANSLUCENT);
                            Graphics2D g2d = (Graphics2D) bi.createGraphics();
                            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                            g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
                            g2d.drawImage(img, 0, 0, w, h, null);
                            g2d.dispose();
                            return bi;
                        }
                    };
                    sw.execute();
                }else{
                    JOptionPane.showMessageDialog(this, "Entered file is not a recognized image, Check and Try again !");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this,"Error:\n"+ex);
            }
        }
    }//GEN-LAST:event_uploadphotoKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Changeprofileframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Changeprofileframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Changeprofileframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Changeprofileframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Changeprofileframe().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cname;
    private javax.swing.JPasswordField cpassword;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField nname;
    private javax.swing.JPasswordField npassword;
    private javax.swing.JTextField pathname;
    private javax.swing.JButton update;
    private javax.swing.JButton uploadphoto;
    // End of variables declaration//GEN-END:variables
private static Boolean isJPEG(File filename) throws Exception {
    DataInputStream ins = new DataInputStream(new BufferedInputStream(new FileInputStream(filename)));
     try {
         switch (ins.readInt()) {
            case 0x89504e47:
                return true;
            case 0xffd8ffe0:
                return true;
            case 0x424d:
                return true;
            case 0x47494638:
                return true;
            case 0x474b534d:
                return true;
            case 0x01da:
                return true;
            case 0xf10040bb:
                return true;
            case 0x49494e31:
                return true;
            case 0x56494557:
                return true;
            case 0x59a66a95:
                return true;
            case 0x4d4d002a:
                return true;
            case 0x49492a00:
                return true;
            case 0x23464947:
                return true;
            case 0x4949:
                return true;
            case 0x38425053:
                return true;
            default:
                return false;
         }
    } finally {
        ins.close();
    }
    }
public static BufferedImage linearResizeBi(BufferedImage origin, int width, int height) {
       BufferedImage resizedImage = new BufferedImage(width, height ,BufferedImage.TYPE_INT_RGB);
        Graphics2D g = resizedImage.createGraphics();
        float xScale = (float)width / origin.getWidth();
        float yScale = (float)height / origin.getHeight();
        AffineTransform at = AffineTransform.getScaleInstance(xScale,yScale);
        g.drawRenderedImage(origin,at);
        g.dispose();
        return resizedImage;
    }





}
